// Code generated by Kitex v0.4.4. DO NOT EDIT.

package commentservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	comment "miniTikTok/kitex_gen/comment"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishComment": kitex.NewMethodInfo(publishCommentHandler, newPublishCommentArgs, newPublishCommentResult, false),
		"ListComment":    kitex.NewMethodInfo(listCommentHandler, newListCommentArgs, newListCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func publishCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DouyinCommentActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).PublishComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishCommentArgs:
		success, err := handler.(comment.CommentService).PublishComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishCommentResult)
		realResult.Success = success
	}
	return nil
}
func newPublishCommentArgs() interface{} {
	return &PublishCommentArgs{}
}

func newPublishCommentResult() interface{} {
	return &PublishCommentResult{}
}

type PublishCommentArgs struct {
	Req *comment.DouyinCommentActionRequest
}

func (p *PublishCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.DouyinCommentActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PublishCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PublishCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PublishCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.DouyinCommentActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishCommentArgs_Req_DEFAULT *comment.DouyinCommentActionRequest

func (p *PublishCommentArgs) GetReq() *comment.DouyinCommentActionRequest {
	if !p.IsSetReq() {
		return PublishCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type PublishCommentResult struct {
	Success *comment.DouyinCommentActionResponse
}

var PublishCommentResult_Success_DEFAULT *comment.DouyinCommentActionResponse

func (p *PublishCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.DouyinCommentActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PublishCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PublishCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PublishCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.DouyinCommentActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishCommentResult) GetSuccess() *comment.DouyinCommentActionResponse {
	if !p.IsSetSuccess() {
		return PublishCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DouyinCommentActionResponse)
}

func (p *PublishCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DouyinCommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).ListComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListCommentArgs:
		success, err := handler.(comment.CommentService).ListComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListCommentResult)
		realResult.Success = success
	}
	return nil
}
func newListCommentArgs() interface{} {
	return &ListCommentArgs{}
}

func newListCommentResult() interface{} {
	return &ListCommentResult{}
}

type ListCommentArgs struct {
	Req *comment.DouyinCommentListRequest
}

func (p *ListCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.DouyinCommentListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.DouyinCommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListCommentArgs_Req_DEFAULT *comment.DouyinCommentListRequest

func (p *ListCommentArgs) GetReq() *comment.DouyinCommentListRequest {
	if !p.IsSetReq() {
		return ListCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListCommentResult struct {
	Success *comment.DouyinCommentListResponse
}

var ListCommentResult_Success_DEFAULT *comment.DouyinCommentListResponse

func (p *ListCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.DouyinCommentListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.DouyinCommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListCommentResult) GetSuccess() *comment.DouyinCommentListResponse {
	if !p.IsSetSuccess() {
		return ListCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DouyinCommentListResponse)
}

func (p *ListCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishComment(ctx context.Context, Req *comment.DouyinCommentActionRequest) (r *comment.DouyinCommentActionResponse, err error) {
	var _args PublishCommentArgs
	_args.Req = Req
	var _result PublishCommentResult
	if err = p.c.Call(ctx, "PublishComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListComment(ctx context.Context, Req *comment.DouyinCommentListRequest) (r *comment.DouyinCommentListResponse, err error) {
	var _args ListCommentArgs
	_args.Req = Req
	var _result ListCommentResult
	if err = p.c.Call(ctx, "ListComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
